{"version":3,"sources":["constants/string.ts","constants/color.tsx","components/todo/styled.tsx","components/todo/TodoList.tsx","components/todo/index.tsx","commonFunctions/index.ts","components/toggler/styled.tsx","components/toggler/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["COMPLETED","EDIT","DELETE","TOASTMSG","colors","commnCss","css","props","isDarkMode","StyledInput","styled","input","StyledTodoList","div","StyleAddIcon","StyledArrowCnt","isToogled","StyledArrowIcon","h4","TodoList","todos","todoAction","completedTodos","completedTodoAction","useState","isToogledPending","setIsToogledPending","isToogledCompleted","setIsToogledCompleted","className","length","onClick","map","todo","index","size","Todo","setTodos","setcompletedTodos","todoInput","setTodoInput","isEdit","setIsEdit","editId","setEditId","inputRef","useRef","useEffect","current","focus","localTodos","localStorage","getItem","localCompletedTodos","JSON","parse","setItem","stringify","hadelAddClick","newTodo","openToast","trim","msg","toast","dark","value","placeholder","onChange","e","string","target","charAt","toUpperCase","slice","onKeyPress","charCode","ref","action","completedTodo","filter","item","id","updatedTodo","position","closeButton","autoClose","limit","TogglerCnt","Toggler","handleDarkMode","setIsDarkMode","color","App","AOS","init","refresh","console","log","StyledDiv","mode","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3b19b813.chunk.js","sourcesContent":["export const COMPLETED=\"completed\"\nexport const EDIT = \"edit\"\nexport const DELETE = \"delete\"\n\n\nexport const NO_TODO_FOUND =\"No todo/s found\"\nexport const NO_COMPLETED_TODO_FOUND =\"No completed todo/s found\"\n\n///// toast msg ///\n\nexport const TOASTMSG={\n    \"DELETED\":\"Todo deleted successfully\",\n    \"EDITED\":'Todo updated successfully',\n    \"ADDED\":\"Todo added successfully\",\n    \"COMPLETED\":\"Great, Todo completed\",\n    \"REMOVED\":\"Todo removed from history\"\n}","export const colors = {\n  white: \"#fff\",\n  black: \"#000\",\n  darkBlue: \"#22395d\", // moon\n  darkModeShadow: \"#282828\",\n  shadow: \"rgb(64 60 67 / 16%)\",\n  lightWhite: \"#f2f2f2\",\n  lightGrey: \"#f5f5f5\",\n  sun: \"#fc9601\",\n};\n","import styled, { css } from \"styled-components\";\n\nimport { colors } from \"../../constants/color\";\n\ninterface Iprops {\n  isDarkMode: Boolean;\n}\n\nconst commnCss = css<Iprops>`\n  background: ${(props) => (props.isDarkMode ? colors.darkBlue : colors.white)};\n  color: ${(props) => (props.isDarkMode ? colors.white : colors.black)};\n  box-shadow: ${(props) =>\n    props.isDarkMode\n      ? `0 2px 5px 2px ${colors.darkModeShadow}`\n      : `0 2px 5px 2px ${colors.shadow}`};\n`;\n\nexport const StyledInput = styled.input<Iprops>`\n  ${commnCss}\n`;\n\nexport const StyledTodoList = styled.div<Iprops>`\n  ${commnCss}\n`;\n\nexport const StyleAddIcon = styled.div<Iprops>`\n  ${commnCss}\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  &:hover {\n    box-shadow: ${(props) =>\n      props.isDarkMode\n        ? `0 2px 5px 2px ${colors.darkModeShadow}`\n        : `0 2px 5px 2px ${colors.shadow}`};\n  }\n`;\n\ninterface props {\n  isToogled: Boolean;\n}\ninterface Props2 {\n  isDarkMode: Boolean;\n}\n\nexport const StyledArrowCnt = styled.div<props>`\n  width: 15px;\n  height: 15px;\n  transform: ${(props) =>\n    props.isToogled ? `rotate(-90deg)` : `rotate(0deg)`};\n  transition: all 0.3s;\n  cursor: pointer;\n`;\n\nexport const StyledArrowIcon = styled.h4<Props2>`\n  width: 15px;\n  height: 15px;\n  border-left: ${(props) =>\n    props.isDarkMode\n      ? `3px solid  ${colors.white}`\n      : `3px solid  ${colors.black}`};\n  border-top: ${(props) =>\n    props.isDarkMode\n      ? `3px solid  ${colors.white}`\n      : `3px solid  ${colors.black}`};\n  transform: rotate(-45deg);\n  overflow: hidden;\n  box-shadow: none;\n`;\n","import { MdOutlineModeEdit } from \"react-icons/md\";\nimport { AiOutlineCheck } from \"react-icons/ai\";\nimport { RiDeleteBinLine } from \"react-icons/ri\";\n\nimport {\n  COMPLETED,\n  DELETE,\n  EDIT,\n  NO_COMPLETED_TODO_FOUND,\n  NO_TODO_FOUND,\n} from \"../../constants/string\";\nimport { StyledArrowCnt, StyledArrowIcon, StyledTodoList } from \"./styled\";\nimport { useState } from \"react\";\n\ninterface Iprops {\n  todos: string[];\n  completedTodos: string[];\n  isDarkMode: Boolean;\n\n  todoAction: (action: string, index: number) => void;\n  completedTodoAction: (action: string, index: number) => void;\n}\n\nconst TodoList = ({\n  todos,\n  todoAction,\n  isDarkMode,\n  completedTodos,\n  completedTodoAction,\n}: Iprops) => {\n  const [isToogledPending, setIsToogledPending] = useState<Boolean>(true);\n  const [isToogledCompleted, setIsToogledCompleted] = useState<Boolean>(true);\n\n  const renderPendingList = () => {\n    return (\n      <div data-aos=\"fade-down\">\n        <div className=\"heading\">\n          <h4>Pending ({todos.length})</h4>\n          <StyledArrowCnt\n            isToogled={isToogledPending}\n            onClick={() => {\n              setIsToogledPending(!isToogledPending);\n            }}\n          >\n            <StyledArrowIcon isDarkMode={isDarkMode} />\n          </StyledArrowCnt>\n        </div>\n        <StyledTodoList className=\"todo-list\" isDarkMode={isDarkMode}>\n          {isToogledPending ? (\n            todos?.length > 0 ? (\n              todos.map((todo, index) => {\n                return (\n                  <div className=\"single-todo\" key={index}>\n                    <div className=\"todo-text\">\n                      <p>{index + 1}.&nbsp; </p> <p>{todo}</p>\n                    </div>\n                    <div className=\"todo-action\">\n                      <AiOutlineCheck\n                        className={COMPLETED}\n                        size={30}\n                        onClick={() => todoAction(COMPLETED, index)}\n                      />\n                      <MdOutlineModeEdit\n                        className={EDIT}\n                        size={30}\n                        onClick={() => todoAction(EDIT, index)}\n                      />\n                      <RiDeleteBinLine\n                        className={DELETE}\n                        size={30}\n                        onClick={() => todoAction(DELETE, index)}\n                      />\n                    </div>\n                  </div>\n                );\n              })\n            ) : (\n              <h4 className=\"no-todo\">{NO_TODO_FOUND}</h4>\n            )\n          ) : null}\n        </StyledTodoList>\n      </div>\n    );\n  };\n\n  const renderCompletedList = () => {\n    return (\n      <div data-aos=\"fade-down\">\n        <div className=\"heading\" data-aos=\"fade-down\">\n          <h4>Completed ({completedTodos.length})</h4>\n          <StyledArrowCnt\n            isToogled={isToogledCompleted}\n            onClick={() => {\n              setIsToogledCompleted(!isToogledCompleted);\n            }}\n          >\n            <StyledArrowIcon isDarkMode={isDarkMode} />\n          </StyledArrowCnt>\n        </div>\n\n        <StyledTodoList isDarkMode={isDarkMode} className=\"todo-list\">\n          {isToogledCompleted ? (\n            completedTodos?.length > 0 ? (\n              completedTodos.map((todo, index) => {\n                return (\n                  <div className=\"single-todo\" key={index}>\n                    <div className=\"todo-text\">\n                      <p>{index + 1}.&nbsp; </p> <p>{todo}</p>\n                    </div>\n                    <div className=\"todo-action\">\n                      <AiOutlineCheck className=\"hidden\" size={30} />\n                      <MdOutlineModeEdit className=\"hidden\" size={30} />\n                      <RiDeleteBinLine\n                        className={DELETE}\n                        size={30}\n                        onClick={() => completedTodoAction(DELETE, index)}\n                      />\n                    </div>\n                  </div>\n                );\n              })\n            ) : (\n              <h4 className=\"no-todo\">{NO_COMPLETED_TODO_FOUND}</h4>\n            )\n          ) : null}\n        </StyledTodoList>\n      </div>\n    );\n  };\n\n  return (\n    <>\n      {renderPendingList()}\n      {renderCompletedList()}\n    </>\n  );\n};\nexport default TodoList;\n","import { useEffect, useRef, useState } from \"react\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport { IoIosAdd } from \"react-icons/io\";\n\nimport TodoList from \"./TodoList\";\nimport { COMPLETED, DELETE, EDIT, TOASTMSG } from \"../../constants/string\";\nimport { capitalizeFirstLetter } from \"../../commonFunctions\";\nimport { StyleAddIcon, StyledInput } from \"./styled\";\n\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"./todo.scss\";\n\ninterface Iprops {\n  isDarkMode: Boolean;\n}\n\nconst Todo = ({ isDarkMode }: Iprops) => {\n  const [todos, setTodos] = useState<string[]>([]);\n  const [completedTodos, setcompletedTodos] = useState<string[]>([]);\n\n  const [todoInput, setTodoInput] = useState<string>(\"\");\n  const [isEdit, setIsEdit] = useState<boolean>(false);\n  const [editId, setEditId] = useState<number>(-1);\n\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    inputRef.current?.focus();\n\n    const localTodos = localStorage.getItem(\"todos\");\n    const localCompletedTodos = localStorage.getItem(\"completedTodos\");\n\n    if (localTodos) setTodos(JSON.parse(localTodos));\n    if (localCompletedTodos) setcompletedTodos(JSON.parse(localCompletedTodos));\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem(\"todos\", JSON.stringify(todos));\n  }, [todos]);\n\n  useEffect(() => {\n    localStorage.setItem(\"completedTodos\", JSON.stringify(completedTodos));\n  }, [completedTodos]);\n\n  const handelInput = (e: React.ChangeEvent<HTMLInputElement>) => {\n    let value = e.target.value;\n    setTodoInput(capitalizeFirstLetter(value));\n  };\n\n  const hadelAddClick = () => {\n    if (todoInput?.length > 0) {\n      if (isEdit && editId >= 0) {\n        let newTodo = [...todos];\n        newTodo[editId] = todoInput;\n        setTodos([...newTodo]);\n        setIsEdit(false);\n        openToast(TOASTMSG.EDITED);\n      } else {\n        setTodos([...todos, todoInput.trim()]);\n        openToast(TOASTMSG.ADDED);\n      }\n      setTodoInput(\"\");\n      inputRef.current?.focus();\n    }\n  };\n\n  const onKeyPress = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    if (e.charCode === 13) {\n      hadelAddClick();\n    }\n  };\n\n  const todoAction = (action: string, index: number) => {\n    if (action === COMPLETED) {\n      let completedTodo = [...todos].filter((item: string, id: number) => {\n        return id === index;\n      });\n\n      let updatedTodo = [...todos].filter((item: string, id: number) => {\n        return id !== index;\n      });\n      setTodos([...updatedTodo]);\n      setcompletedTodos([...completedTodo, ...completedTodos]);\n      openToast(TOASTMSG.COMPLETED);\n    } else if (action === DELETE) {\n      let updatedTodo = [...todos].filter((item: string, id: number) => {\n        return id !== index;\n      });\n      setTodos([...updatedTodo]);\n      openToast(TOASTMSG.DELETED);\n    } else if (action === EDIT) {\n      setIsEdit(true);\n      inputRef.current?.focus();\n      setEditId(index);\n      setTodoInput(todos[index]);\n    }\n  };\n\n  const completedTodoAction = (action: string, index: number) => {\n    if (action === DELETE) {\n      let completedTodo = [...completedTodos].filter(\n        (item: string, id: number) => {\n          return id !== index;\n        }\n      );\n      setcompletedTodos([...completedTodo]);\n      openToast(TOASTMSG.REMOVED);\n    }\n  };\n\n  const openToast = (msg: string) => {\n    if (isDarkMode) toast.dark(msg);\n    else toast(msg);\n  };\n\n  return (\n    <div className=\"main-cnt\">\n      <div className=\"todo-input-cnt\" data-aos=\"fade-down\">\n        <StyledInput\n          isDarkMode={isDarkMode}\n          value={todoInput}\n          className=\"todo-input\"\n          placeholder=\"Enter Todo\"\n          onChange={handelInput}\n          onKeyPress={onKeyPress}\n          ref={inputRef}\n        />\n        <StyleAddIcon\n          isDarkMode={isDarkMode}\n          className=\"add-icon\"\n          onClick={() => hadelAddClick()}\n        >\n          <IoIosAdd size=\"50\" />\n        </StyleAddIcon>\n      </div>\n      <TodoList\n        isDarkMode={isDarkMode}\n        todos={todos}\n        todoAction={todoAction}\n        completedTodos={completedTodos}\n        completedTodoAction={completedTodoAction}\n      />\n      <ToastContainer\n        position=\"bottom-center\"\n        closeButton={true}\n        autoClose={2000}\n        limit={3}\n      />\n    </div>\n  );\n};\nexport default Todo;\n","export const capitalizeFirstLetter=(string: string)=> {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n  }","import styled from \"styled-components\";\nimport { colors } from \"../../constants/color\";\n\ninterface Iprops {\n  isDarkMode: boolean;\n}\n\nexport const TogglerCnt = styled.div<Iprops>`\n  position: relative;\n  display: flex;\n  justify-content: space-around;\n  align-items: center;\n  width: 80px;\n  border-radius: 20px;\n  padding: 5px 0px;\n  position: fixed;\n  right: 5vw;\n  bottom: 5vh;\n  background: ${(props) => (props.isDarkMode ? colors.darkBlue : colors.white)};\n  box-shadow: ${(props) =>\n    props.isDarkMode\n      ? `0 2px 5px 2px ${colors.darkModeShadow}`\n      : `0 2px 5px 2px ${colors.shadow}`};\n  z-index: 10;\n\n  &:before {\n    content: \"\";\n    position: absolute;\n    top: 0;\n    left: ${(props) => (props.isDarkMode ? \"50%\" : 0)};\n    width: 50%;\n    height: 100%;\n    border-radius: 50%;\n    background: ${colors.lightWhite};\n    z-index: -1;\n    transition: all 0.3s;\n  }\n`;\n","import { useEffect, useState } from \"react\";\nimport { BsFillMoonFill, BsFillSunFill } from \"react-icons/bs\";\n\nimport { TogglerCnt } from \"./styled\";\nimport { colors } from \"./../../constants/color\";\n\ninterface Iprops {\n  handleDarkMode: (mode: boolean) => void;\n}\n\nconst Toggler = ({ handleDarkMode }: Iprops) => {\n  let [isDarkMode, setIsDarkMode] = useState<boolean>(false);\n\n  useEffect(() => {\n    handleDarkMode(isDarkMode);\n  }, [isDarkMode]);\n\n  return (\n    <TogglerCnt isDarkMode={isDarkMode}>\n      <BsFillSunFill\n        color={colors.sun}\n        size={25}\n        onClick={() => setIsDarkMode(false)}\n      />\n      <BsFillMoonFill\n        color={colors.darkBlue}\n        size={22}\n        onClick={() => setIsDarkMode(true)}\n      />\n    </TogglerCnt>\n  );\n};\n\nexport default Toggler;\n","import { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport AOS from \"aos\";\n\nimport Todo from \"./components/todo\";\nimport Toggler from \"./components/toggler\";\nimport { colors } from \"./constants/color\";\n\nimport \"./scss/index.scss\";\nimport \"aos/dist/aos.css\";\n\nfunction App() {\n  useEffect(() => {\n    AOS.init();\n    AOS.refresh();\n  }, []);\n  const [isDarkMode, setIsDarkMode] = useState(false);\n\n  useEffect(() => {\n    console.log(isDarkMode);\n  }, [isDarkMode]);\n\n  const handleDarkMode = (mode: boolean) => {\n    setIsDarkMode(mode);\n  };\n\n  return (\n    <StyledDiv className=\"App\" isDarkMode={isDarkMode}>\n      <Todo isDarkMode={isDarkMode} />\n      <Toggler handleDarkMode={handleDarkMode} />\n    </StyledDiv>\n  );\n}\n\nexport default App;\n\ninterface Iprops {\n  isDarkMode: Boolean;\n}\n\nconst StyledDiv = styled.div<Iprops>`\n  background: ${(props) =>\n    props.isDarkMode ? colors.darkBlue : colors.lightGrey};\n  color: ${(props) => (props.isDarkMode ? colors.white : colors.black)};\n`;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}