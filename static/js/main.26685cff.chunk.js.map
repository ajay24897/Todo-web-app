{"version":3,"sources":["constants/index.ts","constants/color.tsx","components/todo/styled.tsx","components/todo/TodoList.tsx","components/todo/index.tsx","commonFunctions/index.ts","components/toogler/styled.tsx","components/toogler/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["COMPLETED","EDIT","DELETE","TOASTMSG","colors","commnCss","css","props","isDarkMode","StyledInput","styled","input","StyledTodoList","div","StyleAddIcon","TodoList","todos","todoAction","completedTodos","completedTodoAction","className","length","reverse","map","todo","index","size","onClick","Todo","useState","setTodos","setcompletedTodos","todoInput","setTodoInput","isEdit","setIsEdit","editId","setEditId","inputRef","useRef","useEffect","current","focus","localTodos","localStorage","getItem","localCompletedTodos","JSON","parse","setItem","stringify","hadelAddClick","newTodo","openToast","trim","msg","toast","dark","value","placeholder","onChange","e","string","target","charAt","toUpperCase","slice","onKeyPress","charCode","ref","action","completedTodo","filter","item","id","updatedTodo","position","closeButton","autoClose","limit","TogglerCnt","Toogler","handleDarkMode","setIsDarkMode","color","App","console","log","StyledDiv","mode","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.26685cff.chunk.js","sourcesContent":["export const COMPLETED=\"completed\"\r\nexport const EDIT = \"edit\"\r\nexport const DELETE = \"delete\"\r\n\r\n\r\nexport const NO_TODO_FOUND =\"No todo/s found\"\r\nexport const NO_COMPLETED_TODO_FOUND =\"No completed todo/s found\"\r\n\r\n\r\n\r\n///// toast msg ///\r\n\r\n\r\nexport const TOASTMSG={\r\n    \"DELETED\":\"Todo deleted successfully\",\r\n    \"EDITED\":'Todo updated successfully',\r\n    \"ADDED\":\"Todo added successfully\",\r\n    \"COMPLETED\":\"Great, Todo completed\",\r\n    \"REMOVED\":\"Todo removed from history\"\r\n}","export const colors = {\r\n  white: \"#fff\",\r\n  black: \"#000\",\r\n  darkBlue: \"#22395d\",\r\n  darkModeShadow: \"#282828\",\r\n  shadow: \"rgb(64 60 67 / 16%)\",\r\n};\r\n","import styled, { css } from \"styled-components\";\r\n\r\nimport { colors } from \"../../constants/color\";\r\n\r\ninterface Iprops {\r\n  isDarkMode: Boolean;\r\n}\r\n\r\nconst commnCss = css<Iprops>`\r\n  background: ${(props) => (props.isDarkMode ? colors.darkBlue : colors.white)};\r\n  color: ${(props) => (props.isDarkMode ? colors.white : colors.black)};\r\n  box-shadow: ${(props) =>\r\n    props.isDarkMode\r\n      ? `0 2px 10px 4px ${colors.darkModeShadow}`\r\n      : `0 2px 10px 4px ${colors.shadow}`};\r\n`;\r\n\r\nexport const StyledInput = styled.input<Iprops>`\r\n  ${commnCss}\r\n`;\r\n\r\nexport const StyledTodoList = styled.div<Iprops>`\r\n  ${commnCss}\r\n`;\r\n\r\nexport const StyleAddIcon = styled.div<Iprops>`\r\n  ${commnCss}\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n","import { MdOutlineModeEdit } from \"react-icons/md\";\r\nimport { AiOutlineCheck } from \"react-icons/ai\";\r\nimport { RiDeleteBinLine } from \"react-icons/ri\";\r\n\r\nimport {\r\n  COMPLETED,\r\n  DELETE,\r\n  EDIT,\r\n  NO_COMPLETED_TODO_FOUND,\r\n  NO_TODO_FOUND,\r\n} from \"../../constants\";\r\nimport { StyledTodoList } from \"./styled\";\r\n\r\ninterface Iprops {\r\n  todos: string[];\r\n  completedTodos: string[];\r\n  isDarkMode: Boolean;\r\n  todoAction: (action: string, index: number) => void;\r\n  completedTodoAction: (action: string, index: number) => void;\r\n}\r\n\r\nconst TodoList = ({\r\n  todos,\r\n  todoAction,\r\n  isDarkMode,\r\n  completedTodos,\r\n  completedTodoAction,\r\n}: Iprops) => {\r\n  return (\r\n    <>\r\n      <div>\r\n        <h4 className=\"heading\">Pending</h4>\r\n        <StyledTodoList className=\"todo-list\" isDarkMode={isDarkMode}>\r\n          {todos?.length > 0 ? (\r\n            todos.reverse().map((todo, index) => {\r\n              return (\r\n                <div className=\"single-todo\" key={index}>\r\n                  <div className=\"todo-text\">\r\n                    <p>{index + 1}.&nbsp; </p> <p>{todo}</p>\r\n                  </div>\r\n                  <div className=\"todo-action\">\r\n                    <AiOutlineCheck\r\n                      className={COMPLETED}\r\n                      size={30}\r\n                      onClick={() => todoAction(COMPLETED, index)}\r\n                    />\r\n                    <MdOutlineModeEdit\r\n                      className={EDIT}\r\n                      size={30}\r\n                      onClick={() => todoAction(EDIT, index)}\r\n                    />\r\n                    <RiDeleteBinLine\r\n                      className={DELETE}\r\n                      size={30}\r\n                      onClick={() => todoAction(DELETE, index)}\r\n                    />\r\n                  </div>\r\n                </div>\r\n              );\r\n            })\r\n          ) : (\r\n            <h4 className=\"no-todo\">{NO_TODO_FOUND}</h4>\r\n          )}\r\n        </StyledTodoList>\r\n      </div>\r\n      <div>\r\n        <h4 className=\"heading\">Completed</h4>\r\n        <StyledTodoList isDarkMode={isDarkMode} className=\"todo-list\">\r\n          {completedTodos?.length > 0 ? (\r\n            completedTodos.map((todo, index) => {\r\n              return (\r\n                <div className=\"single-todo\" key={index}>\r\n                  <div className=\"todo-text\">\r\n                    <p>{index + 1}.&nbsp; </p> <p>{todo}</p>\r\n                  </div>\r\n                  <div className=\"todo-action\">\r\n                    <AiOutlineCheck className=\"hidden\" size={30} />\r\n                    <MdOutlineModeEdit className=\"hidden\" size={30} />\r\n                    <RiDeleteBinLine\r\n                      className={DELETE}\r\n                      size={30}\r\n                      onClick={() => completedTodoAction(DELETE, index)}\r\n                    />\r\n                  </div>\r\n                </div>\r\n              );\r\n            })\r\n          ) : (\r\n            <h4 className=\"no-todo\">{NO_COMPLETED_TODO_FOUND}</h4>\r\n          )}\r\n        </StyledTodoList>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nexport default TodoList;\r\n","import { useEffect, useRef, useState } from \"react\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport { IoIosAdd } from \"react-icons/io\";\r\n\r\nimport TodoList from \"./TodoList\";\r\nimport { COMPLETED, DELETE, EDIT, TOASTMSG } from \"../../constants\";\r\nimport { capitalizeFirstLetter } from \"../../commonFunctions\";\r\nimport { StyleAddIcon, StyledInput } from \"./styled\";\r\n\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"./todo.scss\";\r\n\r\ninterface Iprops {\r\n  isDarkMode: Boolean;\r\n}\r\n\r\nconst Todo = ({ isDarkMode }: Iprops) => {\r\n  const [todos, setTodos] = useState<string[]>([]);\r\n  const [completedTodos, setcompletedTodos] = useState<string[]>([]);\r\n\r\n  const [todoInput, setTodoInput] = useState<string>(\"\");\r\n  const [isEdit, setIsEdit] = useState<boolean>(false);\r\n  const [editId, setEditId] = useState<number>(-1);\r\n\r\n  const inputRef = useRef<HTMLInputElement>(null);\r\n\r\n  useEffect(() => {\r\n    inputRef.current?.focus();\r\n\r\n    const localTodos = localStorage.getItem(\"todos\");\r\n    const localCompletedTodos = localStorage.getItem(\"completedTodos\");\r\n\r\n    if (localTodos) setTodos(JSON.parse(localTodos));\r\n    if (localCompletedTodos) setcompletedTodos(JSON.parse(localCompletedTodos));\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(\"todos\", JSON.stringify(todos));\r\n  }, [todos]);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(\"completedTodos\", JSON.stringify(completedTodos));\r\n  }, [completedTodos]);\r\n\r\n  const handelInput = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    let value = e.target.value;\r\n    setTodoInput(capitalizeFirstLetter(value));\r\n  };\r\n\r\n  const hadelAddClick = () => {\r\n    if (todoInput?.length > 0) {\r\n      if (isEdit && editId >= 0) {\r\n        let newTodo = [...todos];\r\n        newTodo[editId] = todoInput;\r\n        setTodos([...newTodo]);\r\n        setIsEdit(false);\r\n        openToast(TOASTMSG.EDITED);\r\n      } else {\r\n        setTodos([...todos, todoInput.trim()]);\r\n        openToast(TOASTMSG.ADDED);\r\n      }\r\n      setTodoInput(\"\");\r\n      inputRef.current?.focus();\r\n    }\r\n  };\r\n\r\n  const onKeyPress = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n    if (e.charCode === 13) {\r\n      hadelAddClick();\r\n    }\r\n  };\r\n\r\n  const todoAction = (action: string, index: number) => {\r\n    if (action === COMPLETED) {\r\n      let completedTodo = [...todos].filter((item: string, id: number) => {\r\n        return id === index;\r\n      });\r\n\r\n      let updatedTodo = [...todos].filter((item: string, id: number) => {\r\n        return id !== index;\r\n      });\r\n      setTodos([...updatedTodo]);\r\n      setcompletedTodos([...completedTodo, ...completedTodos]);\r\n      openToast(TOASTMSG.COMPLETED);\r\n    } else if (action === DELETE) {\r\n      let updatedTodo = [...todos].filter((item: string, id: number) => {\r\n        return id !== index;\r\n      });\r\n      setTodos([...updatedTodo]);\r\n      openToast(TOASTMSG.DELETED);\r\n    } else if (action === EDIT) {\r\n      setIsEdit(true);\r\n      inputRef.current?.focus();\r\n      setEditId(index);\r\n      setTodoInput(todos[index]);\r\n    }\r\n  };\r\n\r\n  const completedTodoAction = (action: string, index: number) => {\r\n    if (action === DELETE) {\r\n      let completedTodo = [...completedTodos].filter(\r\n        (item: string, id: number) => {\r\n          return id !== index;\r\n        }\r\n      );\r\n      setcompletedTodos([...completedTodo]);\r\n      openToast(TOASTMSG.REMOVED);\r\n    }\r\n  };\r\n\r\n  const openToast = (msg: string) => {\r\n    if (isDarkMode) toast.dark(msg);\r\n    else toast(msg);\r\n  };\r\n\r\n  return (\r\n    <div className=\"main-cnt\">\r\n      <div className=\"todo-input-cnt\">\r\n        <StyledInput\r\n          isDarkMode={isDarkMode}\r\n          value={todoInput}\r\n          className=\"todo-input\"\r\n          placeholder=\"Enter Todo\"\r\n          onChange={handelInput}\r\n          onKeyPress={onKeyPress}\r\n          ref={inputRef}\r\n        />\r\n        <StyleAddIcon\r\n          isDarkMode={isDarkMode}\r\n          className=\"add-icon\"\r\n          onClick={() => hadelAddClick()}\r\n        >\r\n          <IoIosAdd size=\"50\" />\r\n        </StyleAddIcon>\r\n      </div>\r\n      <TodoList\r\n        isDarkMode={isDarkMode}\r\n        todos={todos}\r\n        todoAction={todoAction}\r\n        completedTodos={completedTodos}\r\n        completedTodoAction={completedTodoAction}\r\n      />\r\n      <ToastContainer\r\n        position=\"bottom-center\"\r\n        closeButton={true}\r\n        autoClose={3000}\r\n        limit={3}\r\n      />\r\n    </div>\r\n  );\r\n};\r\nexport default Todo;\r\n","export const capitalizeFirstLetter=(string: string)=> {\r\n    return string.charAt(0).toUpperCase() + string.slice(1);\r\n  }","import styled from \"styled-components\";\r\nimport { colors } from \"../../constants/color\";\r\n\r\ninterface Iprops {\r\n  isDarkMode: boolean;\r\n}\r\n\r\nexport const TogglerCnt = styled.div<Iprops>`\r\n  position: relative;\r\n  display: flex;\r\n  justify-content: space-around;\r\n  align-items: center;\r\n  width: 80px;\r\n  border-radius: 20px;\r\n  padding: 5px 0px;\r\n  position: fixed;\r\n  right: 5vw;\r\n  bottom: 5vh;\r\n  background: ${(props) => (props.isDarkMode ? colors.darkBlue : colors.white)};\r\n  box-shadow: ${(props) =>\r\n    props.isDarkMode\r\n      ? `0 2px 10px 4px ${colors.darkModeShadow}`\r\n      : `0 2px 10px 4px ${colors.shadow}`};\r\n\r\n  &:before {\r\n    content: \"\";\r\n    position: absolute;\r\n    top: 0;\r\n    left: ${(props) => (props.isDarkMode ? \"50%\" : 0)};\r\n    width: 50%;\r\n    height: 100%;\r\n    border-radius: 50%;\r\n    background: #f2f2f2;\r\n    z-index: -1;\r\n    transition: all 0.3s;\r\n  }\r\n`;\r\n","import { useEffect, useState } from \"react\";\r\nimport { BsFillMoonFill, BsFillSunFill } from \"react-icons/bs\";\r\n\r\nimport { TogglerCnt } from \"./styled\";\r\n\r\ninterface Iprops {\r\n  handleDarkMode: (mode: boolean) => void;\r\n}\r\n\r\nconst Toogler = ({ handleDarkMode }: Iprops) => {\r\n  let [isDarkMode, setIsDarkMode] = useState<boolean>(false);\r\n\r\n  useEffect(() => {\r\n    handleDarkMode(isDarkMode);\r\n  }, [isDarkMode]);\r\n\r\n  return (\r\n    <TogglerCnt isDarkMode={isDarkMode}>\r\n      <BsFillSunFill\r\n        color=\"#fc9601\"\r\n        size={25}\r\n        onClick={() => setIsDarkMode(false)}\r\n      />\r\n      <BsFillMoonFill\r\n        color=\"#22395d\"\r\n        size={22}\r\n        onClick={() => setIsDarkMode(true)}\r\n      />\r\n    </TogglerCnt>\r\n  );\r\n};\r\n\r\nexport default Toogler;\r\n","import { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport Todo from \"./components/todo\";\nimport Toogler from \"./components/toogler\";\nimport { colors } from \"./constants/color\";\n\nimport \"./scss/index.scss\";\n\nfunction App() {\n  const [isDarkMode, setIsDarkMode] = useState(false);\n\n  useEffect(() => {\n    console.log(isDarkMode);\n  }, [isDarkMode]);\n\n  const handleDarkMode = (mode: boolean) => {\n    setIsDarkMode(mode);\n  };\n\n  return (\n    <StyledDiv className=\"App\" isDarkMode={isDarkMode}>\n      <Todo isDarkMode={isDarkMode} />\n      <Toogler handleDarkMode={handleDarkMode} />\n    </StyledDiv>\n  );\n}\n\nexport default App;\n\ninterface Iprops {\n  isDarkMode: Boolean;\n}\n\nconst StyledDiv = styled.div<Iprops>`\n  background: ${(props) => (props.isDarkMode ? colors.darkBlue : colors.white)};\n  color: ${(props) => (props.isDarkMode ? colors.white : colors.black)};\n`;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}